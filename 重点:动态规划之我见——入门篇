动态规划：动态规划是求解决策过程最优化的数学方法，其核心思想是通过建立可以作为参考的查找表，自顶向下或自底向上的基于查找表和推理逻辑将查找表扩大，
直至包含所需要的结果。由核心思想可以看出，能够使用动态规划解答的问题，基本的要求是查找表的内容间是可推导的，具有关联性（即具有子结构，一个问题如果
没有子结构，说明这个问题不同答案之间基本没有关联性，这样是无法通过查找表和推理逻辑将查找表扩大）同时这种问题的子结构还必须存在最优选择，为什么需要
存在最优选择？因为如果我们如果想要对一个简单的问题进行暴力破解，直接使用回溯法等手法就可以进行暴力破解，如果我们在回溯法的过程中把他得到每一个答案
都用表格储存起来，那么这个表格是符合刚才描述的基于查找表关系和推理逻辑扩大查找表的思路的（回溯法前后当然具有关联性），但是这样的答案没有任何意义，
因为他使用起来比回溯法（暴力破解还要消耗资源和时间）所以动态规划应该具有比暴力破解更优秀的性能才是我们使用的原因，如果我们可以通过每次获取最优解的方式，
把这个查找表进行压缩，使其需要分析的可能性降低，这样就能有效地节省资源（举例：对于需要两次循环进行暴力破解的问题，其答案的可能性是N*N，
但是如果我们可以在进行一次循环之后，得出一个最优结构，发现最终答案只可能从第一次循环的第二种可能的前提下出现，那么我们就可以不需要对
第一次循环的除了第二种可能外的所有可能进行尝试了，这样的话我们通过记表和推理逻辑有效地降低了尝试的次数，从暴力破解的N*N次尝试变成了log(N)级别的复杂度）
这就是动态规划的存在的意义：基于查找表，推理逻辑，存在最优选择这三点，使其可以降低时间复杂度。


在了解了动态规划的核心思想之后，想要学习动态规划其实就简单不少了，因为动态规划的查找表内容具有可推导的性质，所以他的状态转移方程很大程度
上会和数学归纳法部分很像，学过高中理科数学的当然都知道数学归纳法给出的前后关系要求推出直接的参数与结果的关系，这里的动态规划的应用者是电脑，
我们只要能够找出前后关系，让电脑去进行前后推导即可（当然这其实并不简单，个人认为这是整个动态规划里面最难解决的部分，这属于我上面提到的推理逻辑部分）
基于这部分我把动态规划分解为简单动态规划和复杂动态规划，复杂的动态规划目前我还没有总结出比较好的求解状态转移方程的思路，
但是简单的动态规划题目以笔者粗浅的见识来看可以大致分为三类：

1）01背包问题，关于01背包问题，个人认为这种问题在简单动态规划里面属于偏难的，其原因是他的查找表是二维的，01背包问题的查找表在压缩后依然是N*N级别的，
更重要的是他的推理逻辑是二维的（即不是一般的压缩后是线性的动态规划）（一般的动态规划是基于最优子结构+当前判断（O(1)级别的推理）进行延伸推理，
但是这个问题的最优结构是不是最优子结构+当前判断，而是多个最优子结构可能+当前判断（O(N)级别的推理），这使得他的推理逻辑更加复杂）
所以相对来说就比线性的动态规划会更难更麻烦一些。
2）普通线性动态规划与图相关，在leetcode里面标记中等困难的动态规划题目里面有一类是寻找从左上角到右下角的最优答案（或者是最少过图血量的地下城游戏问题）
这种问题虽然他的查找表是二维的（因为是图），但是他的推理逻辑是一维的（基本都是从上方到当前格或左方到当前格，所以是O(1)级别的）
这种问题虽然解的过程可能比较麻烦，但是其思路是简单的。
3）最普通的简单线性动态规划，这类问题是动态规划中最简单的问题，典型的例子是斐波那契数列问题爬楼梯，这类问题是基于一个一维的表格，
根据简单的推理逻辑就可以扩大查找表直至找到答案，无论是思路和解题过程都是最简单的。
4）简单动态规划中的连续性问题，这类问题通常会作为动态规划基础问题来进行讲解，但是在我第一次看到这种解题的思路的时候我一直看不明白到底是什么逻辑。
在这里我引用我关于leetcode第53题中的思路来解释：
https://github.com/ClarkCh/leetcode/blob/master/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E8%BF%9E%E7%BB%AD/53%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD%E5%AD%90%E5%BA%8F%E5%92%8C
个人因为这里面对于这种连续性的问题的思考过程描述得很详尽，值得一看。


以上内容均为个人见解，由于本人入门不久，可能对于算法思想的理解不够到位，但是我会在日后的学习中进一步提高自己。
希望以后的自己看到这段内容时也能是坚持提高自己的，共勉。
